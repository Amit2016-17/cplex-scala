/*
 *  Source file provided under Apache License, Version 2.0, January 2004,
 *  http://www.apache.org/licenses/
 *  (c) Copyright DecisionBrain SAS 2016,2019
 */

group 'com.decisionbrain'
version '1.5.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply from: 'gradle/cplex_plugin.gradle'

//
// DecisionBrain Nexus Repository for Jar files and Docker images
//

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task scaladocJar(type: Jar) {
    classifier = 'scaladoc'
    from scaladoc.destinationDir
}

apply plugin: 'maven-publish'

publishing {
    publications {
        library(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            artifact scaladocJar
        }
    }
    repositories {
        maven {
            name = "Nexus"
            url = "$NEXUS_URL/repository/" + (version.endsWith('SNAPSHOT') ? "snapshots" : "releases")
            credentials {
                username = "$MAVEN_USER"
                password = "$MAVEN_PASSWORD"
            }
        }
    }
}

//
// CPLEX Home
//

if (!hasProperty('cplexStudioHome')) {
    def cplexStudioHome = System.getenv()["CPLEX_STUDIO_HOME"]
    project.ext.set("cplexStudioHome", cplexStudioHome)
}

System.out.println("Using CPLEX : ${cplexStudioHome}")

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

project.ext.set("copyright", new File("copyright.txt").text)

repositories {
    // HACK: if we ask Gradle to refresh the dependencies, don't look at local repo!
    if (!gradle.startParameter.refreshDependencies) {
        mavenLocal()
    }
    maven {
        credentials {
            username "$MAVEN_USER"
            password "$MAVEN_PASSWORD"
        }
        url "$NEXUS_URL/repository/public"
    }
    mavenCentral()
}

configurations.all {
    // check for SNAPSHOT Updates every time instead of every 24h
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

// Custom sourceSets
sourceSets {
    test {
        scala {
            srcDirs += 'src/examples/scala'
        }
    }
}

eclipse {
    classpath {
        downloadSources=true
    }
}

idea {
    module {
        downloadSources = true
    }
}


javadoc {
    doLast {
        copy {
            from "src"
            include "**/doc-files/*.png"
            into "$buildDir/docs/javadoc"
        }
    }
    options.setHeader("<script type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"></script>")
    options.showFromPrivate()
    options.setBottom("$copyright")
}

scaladoc {
    doLast {
        copy {
            from "src"
            include "**/doc-files/*.png"
            into "$buildDir/docs/scaladoc"
        }
    }
}

ext {
    scalaVersion = '2.12.8'
    scalaVersionShort = '2.12'
}

dependencies {
    compile fileTree(dir: cplexStudioHome + "/opl/lib", include: ['*.jar'])
    compile fileTree(dir: cplexStudioHome + "/cplex/lib", include: ['*.jar'])
    compile fileTree(dir: cplexStudioHome + "/cpoptimizer/lib", include: ['*.jar'])

    compile 'org.slf4j:slf4j-api:1.7.10'
    compile 'commons-lang:commons-lang:2.6'
    compile('org.scala-lang:scala-library:2.12.8')

    testCompile "org.hamcrest:hamcrest-core:1.3"
    testCompile "org.hamcrest:hamcrest-library:1.3"
    testCompile('org.mockito:mockito-all:1.9.5')
    testCompile("junit:junit:4.12")
    testCompile("org.scalatest:scalatest_$scalaVersionShort:3.0.1")
    testCompile 'org.slf4j:slf4j-simple:1.7.10'
}

wrapper {
    gradleVersion = '5.4'
    description = 'Install Gradle Wrapper'
}

